---
import { Icon } from "astro-icon/components";
import Form from "src/components/Form";
import LikeCounter from "src/components/ui/LikeCounter.tsx";
import Skeleton from "src/components/ui/Skeleton.astro";
---

<section class="w-full container mx-auto px-4 mt-36">
  <h1
    class="[&>span]:text-primary-color text-white text-lg-title text-center text-pretty font-alfa-slab-one leading-relaxed uppercase mb-8"
  >
    Te cuento cómo <span>puedes lograrlo...</span>
  </h1>
  <div
    class="bg-primary-color/10 border-primary-color border-2 rounded-xl grid lg:grid-cols-2 gap-4 lg:gap-8 p-5 md:p-8"
  >
    <div class="space-y-5">
      <div
        class="vsl-video observe-element h-auto aspect-video border-2 rounded-xl relative cursor-pointer border-primary-color/25 hover:border-primary-color/50"
      >
        <Skeleton />
        <Icon
          name="play-icon"
          class="size-[60px] text-primary-color/30 absolute -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2 right-1/2"
        />
      </div>

      <div class="space-y-2">
        <h2 class="block text-white font-bold text-lg uppercase">
          Cómo mi plan ha ayudado a cientos de personas a conseguir sus
          objetivos 💪
        </h2>
        <div class="w-fit flex items-center gap-4">
          <LikeCounter client:load />
          <button
            type="button"
            id="share-button"
            class="font-semibold text-xs text-black bg-white tracking-wide leading-relaxed rounded-full transition-all hover:bg-white/80 px-4 py-2 block cursor-pointer disabled:bg-white/80 disabled:cursor-not-allowed focus:outline-none"
          >
            Compartir
          </button>
        </div>
        <p
          class="block text-gray-400 leading-relaxed text-sm text-pretty w-full"
        >
          <strong class="block mb-1 font-bold text-white">Descripción:</strong>
          Conoce a detalle cómo con mi plan ha ayudado a cientos de personas a salir
          del estancamiento y a conseguir sus objetivos. Si estás listo para transformar
          tu físico entonces debes llenar el formulario honestamente y podrás programar
          una reunión conmigo.
        </p>
      </div>
    </div>

    <div class="flex flex-col gap-4">
      <p
        class="important-note opacity-0 w-full bg-orange-400/30 p-4 rounded-xl border-orange-400/40 border-2 text-sm"
      >
        <strong>Importante:{" "}</strong>
        Solo cuando termines de llenar el formulario podrás agendar una reunión conmigo.
        Te veo del otro lado. 😉
      </p>
      <Form client:load />
    </div>
  </div>
</section>

<script>
  import { animate } from "motion";

  document.addEventListener("DOMContentLoaded", () => {
    const popAnimation = (element: Object, state: string, duration: number) => {
      const SCALE_IN = 1;
      const SCALE_OUT = 0.5;
      const OPACITY_IN = 1;
      const OPACITY_OUT = 0.2;

      if (!element) {
        throw new Error("Element not found");
      }

      if (state === "pop-in") {
        animate(
          element,
          {
            scale: SCALE_IN,
            opacity: OPACITY_IN,
          },
          {
            duration: duration,
            ease: "linear",
          }
        );
      } else if (state === "pop-out") {
        animate(
          element,
          {
            scale: SCALE_OUT,
            opacity: OPACITY_OUT,
          },
          {
            duration: duration,
            ease: "linear",
          }
        );
      }
    };

    // Obtener elementos del DOM
    const observeElements = document.querySelectorAll(
      ".observe-element"
    ) as NodeListOf<HTMLElement>;
    const noteElement = document.querySelector(
      ".important-note"
    ) as HTMLElement;
    const shareButton = document.getElementById(
      "share-button"
    ) as HTMLButtonElement;

    shareButton?.addEventListener("click", () => {
      const text = "https://www.youtube.com";

      navigator.clipboard
        .writeText(text)
        .then(() => {
          console.log("Enlace copiado al portapapeles");
        })
        .catch((err) => {
          console.error("Error al copiar el enlace al portapapeles", err);
        });
    });

    const observerOptions = {
      root: null,
      threshold: 0.2,
      rootMargin: "0px",
    };

    const noteObserver = new IntersectionObserver(
      (entries) => {
        const DURATION = 0.6;

        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            // Al entrar en pantalla
            setTimeout(() => {
              animate(
                entry.target,
                { opacity: 1 },
                { duration: DURATION, ease: "easeIn" }
              );
            }, 500);
          } else {
            // Al salir de la pantalla
            animate(
              entry.target,
              { opacity: 0 },
              { duration: DURATION, ease: "easeOut" }
            );
          }
        });
      },
      { root: null, threshold: 0.1, rootMargin: "0px" }
    );
    noteObserver.observe(noteElement);

    const observer = new IntersectionObserver((entries) => {
      const duration: number = 0.3;

      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          // Al entrar en pantalla
          popAnimation(entry.target, "pop-in", duration);
        } else {
          // Al salir de la pantalla
          popAnimation(entry.target, "pop-out", duration);
        }
      });
    }, observerOptions);

    // Antes de observarlos, seteamos su estilo inicial
    observeElements.forEach((element) => {
      observer.observe(element);
    });
  });
</script>

<style>
  .vsl-video {
    box-shadow: 0px 0px 10px 0px rgba(215, 0, 0, 0.2);
    transition: box-shadow 0.3s ease;
  }

  .vsl-video:hover {
    box-shadow: 0px 0px 20px 0px rgba(215, 0, 0, 0.4);
  }
</style>
