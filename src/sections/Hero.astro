---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import HeroBackground from "@images/hero-background.jpg";
import HeroForeground from "@images/hero-foreground.png";
import PrimaryButton from "src/components/ui/PrimaryButton.astro";
import ModalForm from "src/components/ModalForm.astro";
import { AnimatePresence } from "framer-motion";

const benefitsList = [
  "Nutrición",
  "Rutina 100% personalizada",
  "Acompañamiento 24/7",
  "Comunidad exclusiva",
  "Plan personalizado",
  "Coaching en vivo",
];
---

<section
  class="overflow-hidden relative min-h-dvh md:grid md:grid-cols-2 md:items-center"
  style="background: radial-gradient(
      closest-side,
      rgba(22, 1, 1, .15) 0%,
      rgba(6, 0, 0, 1) 100%
    );"
>
  <AnimatePresence>
    <ModalForm modalId="modal-form" />
  </AnimatePresence>
  <div
    class="custom-padding max-md:h-dvh px-4 md:mt-10 flex flex-col justify-between relative z-20 lg:w-[90%] mx-auto"
  >
    <h1
      class="hero-title duration-700 ease-in-out -translate-x-[80%] inline-block [&>span]:text-primary-color text-white text-lg-title max-md:text-center text-balance font-alfa-slab-one leading-relaxed uppercase"
    >
      <span>Transforma tu físico sin complicarte</span> con mi plan personalizado
      de 90 días
    </h1>
    <p
      class="max-md:hidden text-sm text-pretty leading-relaxed max-lg:mb-6 mb-10"
    >
      Ayudo a hombres a transformar su físico sin dietas restrictivas y con un
      plan personalizado de 90 días.
    </p>

    <ul class="max-md:hidden grid grid-cols-2 max-lg:mb-6 mb-10 gap-4">
      {
        benefitsList.map((item) => (
          <li class="flex items-center gap-2 text-sm text-white/60">
            <Icon name="check-icon" class="size-9 text-primary-color" />
            <span>{item}</span>
          </li>
        ))
      }
    </ul>

    <div
      class="flex flex-col max-md:mx-auto max-md:items-center gap-4 max-lg:gap-2"
    >
      <PrimaryButton id="open-modal-form-btn">Contáctame</PrimaryButton>
      <p
        class="text-[#bbbbbb] text-center text-xs font-normal mb-6 leading-snug"
      >
        En caso de no lograrlo te devolvemos el 100% y te ayudo personalmente
        hasta conseguir el objetivo (por haberte hecho perder el tiempo).
      </p>
    </div>
  </div>

  <div class="w-full md:h-dvh mx-auto md:relative">
    <div
      class="overflow-hidden md:relative size-full max-md:absolute max-md:top-0 max-md:-z-10"
      style="background: radial-gradient(closest-side,rgba(0, 0, 0, 0) 0%,rgba(0, 0, 0, 0.65) 100%);"
    >
      <Image
        src={HeroBackground}
        alt="Hero Background"
        class="size-full object-cover md:-scale-x-100"
        loading="eager"
        decoding="sync"
      />
      <div
        class="backdrop-blur-sm max-md:hidden absolute inset-0 pointer-events-none"
      >
      </div>
    </div>

    <div
      class="flex items-end justify-center absolute z-30 max-md:z-10 inset-0 pointer-events-none"
      style="background: radial-gradient(closest-side,rgba(0, 0, 0, 0) 0%,rgba(0, 0, 0, 0.65) 100%);"
    >
      <Icon
        id="thunder-icon"
        name="thunder-vector"
        class="transition-transform duration-1000 z-20 -translate-y-60 translate-x-40 size-full absolute top-0 text-white/50"
      />
      <Image
        id="hero-foreground"
        src={HeroForeground}
        alt="Hero Foreground"
        class="transition-transform duration-700 ease-out scale-0 opacity-0 absolute z-20 w-[300px] md:w-hero-foreground h-auto bottom-0"
        loading="eager"
        decoding="sync"
      />
    </div>
  </div>

  <div class="md:hidden absolute inset-0 backdrop-blur-sm -z-10"></div>
</section>

<script>
  const thunderIcon = document.getElementById("thunder-icon") as HTMLElement;
  const heroForeground = document.getElementById(
    "hero-foreground"
  ) as HTMLElement;
  const heroTitle = document.querySelector(".hero-title")! as HTMLElement;
  const openModalFormBtn = document.getElementById(
    "open-modal-form-btn"
  ) as HTMLButtonElement;
  const modalForm = document.getElementById("modal-form") as HTMLDialogElement;

  openModalFormBtn?.addEventListener("click", () => {
    document.body.style.overflow = "hidden";
    modalForm.showModal();
  });

  document.addEventListener("click", (event: MouseEvent) => {
    if (event.target === modalForm) {
      document.body.style.overflow = "auto";
      modalForm.close();
    }
  });

  const titleObserver = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          // Al entrar en pantalla
          entry.target.classList.replace("-translate-x-[80%]", "translate-x-0");
        } else {
          // Al salir de la pantalla
          entry.target.classList.replace("translate-x-0", "-translate-x-[80%]");
        }
      });
    },
    { root: null, threshold: 0.1, rootMargin: "0px" }
  );

  // Observa el título
  if (heroTitle) {
    titleObserver.observe(heroTitle);
    // También puedes usar animate(heroTitle, ...) acá
  }

  const observerThunderIcon = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        const { isIntersecting } = entry;

        if (isIntersecting) {
          entry.target.classList.remove("-translate-y-60", "translate-x-40");
          entry.target.classList.add("-translate-y-0", "translate-x-0");
        } else {
          entry.target.classList.remove("-translate-y-0", "translate-x-0");
          entry.target.classList.add("-translate-y-60", "translate-x-40");
        }
      });
    },
    { root: null, threshold: 0.3, rootMargin: "0px" }
  );
  observerThunderIcon.observe(thunderIcon);

  const observerForeground = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        const { isIntersecting } = entry;

        if (isIntersecting) {
          entry.target.classList.remove("scale-0", "opacity-0");
          entry.target.classList.add("scale-100", "opacity-100");
        } else {
          entry.target.classList.remove("scale-100", "opacity-100");
          entry.target.classList.add("scale-0", "opacity-0");
        }
      });
    },
    { root: null, threshold: 0.3, rootMargin: "0px" }
  );
  observerForeground.observe(heroForeground);
</script>

<style>
  @keyframes thunder-strike {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }

  .thunder-strike {
    animation: thunder-strike 1.5s ease-in-out forwards;
  }

  .custom-padding {
    padding-top: calc(clamp(8rem, 12dvw, 6.5rem));
  }

  /* Media query para md */
  @media (max-width: 768px) {
    .custom-padding {
      padding-bottom: 0;
    }
  }
</style>
